kondo  00:29
Interpret は……なんか頑張る感じというか (他に言うことがない)。やることは分かっているけどちょっと他の課題に比べて量があるなぁ、みたいなタイプなのかな。頑張れ。。。
:man-bowing:
1

00:29
ThreadPool はそもそも、難しい。。。。。。
00:32
Interpret に限らないことかもしれないけど……。
最初に設計どうするかざっくり考える (こんな UI にするつもりでクラスは大体こんなノリでー、ぐらい)
全部完成するまで動かない、ではなく途中で動かせるように作っていく (まず 16.6 をやるんだけど、フィールドの修正はあとにしてとにかくオブジェクト生成して自分で動かして試せるようにするというか……)
:man-bowing:
1

20200120
以下は近藤さんに口頭でアドバイス頂いたもの．
16.6 は全部まとめて達成するのではなく分割した方がいい．
constructor で引数 0 なやつ．constructor でインスタンス一個作れてインスタンス出来たら 1 コミット．
引数複数なら GUI 使いまわし．

field を見れることと修正は分けて最初は field の中が見れるみたいな．
eclipse の debug での value の window みたいな．
修正は右クリックでやるとか．
まず見れることから実装．すげえ簡単なやつから進める．
階層的なフィールドは階層を表示するものが AWT とか SWING にライブラリ．
二階層以降は無視するみたいな．

簡単な GUI を作って動かせるようにするべき．

さっさと 16.10 まで行くべき．クビを避けるために．

method も一覧で右クリックで実行（引数 0 で）実行でログ出すとか
GUI は使いまわしができるので，それを念頭に全部あっさり目にやって置く．一つの問題に拘泥しない．使いまわせないものを作っても意味がない．

後半の問題が難しいので先に考えておく必要あり．

ArrayList の配列を作ったあとにそれを add するときを考えると結構むずい．
自分で定義したクラスとかを add とかすると．変数みたいな概念が必要になる．インスタンス管理モジュールが居て管理モジュールと GUI を分ける．
GUI と分離すると単体テストが書ける．単体テストで正常系を一つでも書いておくと開発しやすい．

